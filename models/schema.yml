segment_universal_user_id:
    constraints:
        not_null:
            - universal_alias
            - alias
        unique:
            - alias

segment_sessions:
  constraints:
    unique:
      - session_id
      - ('session_id' || '|' || session_seq_num)
    not_null:
      - next_session_start
      - sessions_seq_num
      - session_id

segment_session_mapped_actions:
  constraints:
    unique:
      -
    not_null:
      -



# This configuration file specifies constraints that should (ideally)
# be true about your data models. The constraints can be tested using
# the `dbt test --schema` command. When that command is executed, dbt
# will compile this schema.yml file to a series of SQL statements and
# validate that the specified constraints hold against your data.

# A dbt project can contain any number of schema.yml files. Moreover,
# schema.yml files can be placed anywhere within the `models` directory
# of your dbt project.

# There are four types of schema validations:
#  - Not null
#  - Unique
#  - Referential integrity
#  - Field in list of accepted values

# A schema.yml file should specify constraints for one or more models.
# These constraints should adhere to the following structure:

# [model-name]:
#     constraints:
#         not_null:
#             - [field or expression]
#             - [field or expression]
#             ...
#
#         unique:
#             - [field or expression]
#             - [field or expression]
#             ...
#
#         relationships:
#             - {from: [field], to: [other-model], field: [other-field]}
#             ...
#
#         accepted_values:
#             - {field: [field or expression], values: ['valid', 'values', 'here']}
#             ...
#
# Below is an example of some schema constraints defined for fictitious models.
#

# people:
#   constraints:
#     # check number of times these fields are null (should be 0)
#     not_null:
#       - id
#       - account_id
#       - name
#
#     # count number of non-unique `id` fields (should be 0)
#     unique:
#       - id
#
#     # count number of rows where `people.account_id` points to a nonexistent `accounts.id` (should be 0)
#     relationships:
#       - {from: account_id, to: accounts, field: id}
#
# accounts:
#   constraints:
#     # count number of rows where a value is not in the given accepted values
#     accepted_values:
#       - {field: tier, values: ['paid', 'free']}
#
#     not_null:
#       - id
#       - domain
#
#     unique:
#       - id


